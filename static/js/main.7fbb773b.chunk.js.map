{"version":3,"sources":["state/types.ts","state/reducers.ts","services/starWarsApi.ts","state/actions.ts","state/sagas.ts","state/index.ts","reportWebVitals.ts","utils/breakpoints.ts","components/Button/Button.styled.js","components/Button/index.js","components/Button/Button.js","components/Films/FilmListItem.tsx","utils/text.ts","components/Films/FilmsList.styled.tsx","components/Films/FilmsList.tsx","components/ErrorMessage/ErrorMessage.styled.tsx","components/Text/Text.styled.js","components/Text/index.js","components/Text/Text.js","components/ThemedLoader/ThemedLoader.tsx","containers/CharacterDetailsContainer.tsx","components/Characters/CharactersListItem.styled.tsx","components/Characters/CharacterListItem.tsx","components/Characters/CharactersList.styled.tsx","components/Characters/CharactersList.tsx","components/Modal/ModalBox.styled.tsx","components/Modal/ModalCloseButton.tsx","components/Modal/ModalContent.styled.tsx","components/Modal/ModalOverlay.styled.tsx","components/Modal/Modal.tsx","components/Form/FormTitle.styled.js","components/Input/Input.styled.js","components/Input/index.js","components/Input/Input.js","components/Form/Form.styled.js","components/Form/FormGroup.styled.js","components/Characters/SearchCharacterForm.tsx","containers/CharactersListContainer.tsx","components/AppContainer/AppContainer.styled.ts","theme/index.tsx","App.tsx","index.tsx","state/store.ts"],"names":["CharacterActionTypes","FilmActionTypes","initialCharactersState","characters","count","hasMoreData","data","selectedCharacter","loading","error","page","initialFilmsState","films","selectedCharacterFilms","starWarsApi","baseUrl","peopleEndpoint","planetsEndpoint","filmsEndpoint","defaultHeaders","Accept","search","a","this","get","response","Promise","all","results","map","character","mapToCharacter","next","planetId","mapToPlanet","filmId","mapToFilm","url","split","reverse","getIdFromUrl","homeworld","fetchPlanet","planet","id","name","filmIds","filmUrl","population","film","title","releaseDate","Date","openingCrawl","path","config","init","method","headers","makeRequest","Request","request","fetch","ok","Error","statusText","json","body","fetchCharacters","searchValue","type","FETCH_CHARACTERS","payload","selectCharacter","SELECT_CHARACTER","fetchFilmsSuccess","FETCH_FILMS_SUCCESS","fetchCharacterFilmsSuccess","FETCH_CHARACTER_FILMS_SUCCESS","handleCharactersFetch","watchFetchCharacters","charactersSaga","handleFilmsFetch","watchFetchFilms","filmsSaga","action","call","result","put","FETCH_CHARACTERS_SUCCESS","message","FETCH_CHARACTERS_ERROR","takeLatest","fork","findFilm","find","selectFilms","state","characterFilms","filmIdsToFetch","select","forEach","foundFilm","push","fetchFilm","FETCH_FILMS_ERROR","FETCH_FILMS","rootSaga","rootReducer","combineReducers","nextPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","size","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","StyledButton","styled","button","theme","boxShadow","props","disabled","css","componentBackgroundColor","primaryColor","activeBoxShadow","Button","children","otherProps","FilmListItem","text","charactersCount","toLocaleDateString","length","substring","StyledFilmsList","ul","FilmsList","renderFilm","StyledErrorMessage","p","StyledText","Text","ThemedLoader","themeContext","useContext","ThemeContext","color","accentColor","height","width","CharacterDetailsContainer","useSelector","dispatch","useDispatch","useEffect","StyledCharactersListItem","li","CharacterListItem","onClick","StyledCharactersList","CharactersList","onCharacterSelect","renderCharacter","StyledModalBox","div","StyledModalCloseButton","StyledModalContent","StyledModalOverlay","isOpen","Modal","onClose","document","style","overflow","FormTitle","h1","secondaryAccentColor","StyledInput","input","placeholderColor","Input","StyledForm","form","StyledFormGroup","SearchCharacterForm","searchCharacter","useState","setSearchValue","onSubmit","e","preventDefault","placeholder","onChange","target","value","CharactersListContainer","onSearchCharacter","useCallback","StyledAppContainer","progressBarLineStartColor","progressBarLineEndColor","App","store","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","composeEnhancers","composeWithDevTools","createStore","run","configureStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7fbb773b.chunk.js","sourcesContent":["export type ResourceUrl = string;\nexport type ResourceId = number;\n\nexport interface Resource {\n  id: ResourceId;\n}\n\nexport interface PagedData<T> {\n  count: number;\n  hasMoreData: boolean;\n  data: T[];\n}\n\nexport interface Planet extends Resource {\n  name: string;\n  population: string;\n}\n\nexport interface Character extends Resource {\n  name: string;\n  homeworld: Planet;\n  filmIds: ResourceId[];\n}\n\nexport interface Film extends Resource {\n  title: string;\n  releaseDate: Date;\n  openingCrawl: string;\n}\n\nexport interface CharactersState {\n  readonly characters: PagedData<Character>;\n  readonly selectedCharacter: Character | null;\n  readonly loading: boolean;\n  readonly error: string | null;\n  readonly page: number;\n}\n\nexport interface FilmsState {\n  readonly films: Film[];\n  readonly selectedCharacterFilms: Film[];\n  readonly loading: boolean;\n  readonly error: string | null;\n}\n\nexport enum CharacterActionTypes {\n  FETCH_CHARACTERS = \"@@characters/FETCH_CHARACTERS\",\n  FETCH_CHARACTERS_SUCCESS = \"@@characters/FETCH_CHARACTERS_SUCCESS\",\n  FETCH_CHARACTERS_ERROR = \"@@characters/FETCH_CHARACTERS_ERROR\",\n  SELECT_CHARACTER = \"@@characters/SELECT_CHARACTER\",\n}\n\nexport enum FilmActionTypes {\n  FETCH_FILMS = \"@@films/FETCH_FILMS\",\n  FETCH_FILMS_SUCCESS = \"@@films/FETCH_FILMS_SUCCESS\",\n  FETCH_FILMS_ERROR = \"@@films/FETCH_FILMS_ERROR\",\n  FETCH_CHARACTER_FILMS_SUCCESS = \"@@films/FETCH_CHARACTER_FILMS_SUCCESS\",\n}\n\nexport interface FetchCharactersAction {\n  type: CharacterActionTypes.FETCH_CHARACTERS;\n  payload: {\n    searchValue: string;\n    page: number;\n  };\n}\n\nexport interface FetchCharactersSuccessAction {\n  type: CharacterActionTypes.FETCH_CHARACTERS_SUCCESS;\n  payload: {\n    characters: PagedData<Character>;\n  };\n}\n\nexport interface FetchCharactersErrorAction {\n  type: CharacterActionTypes.FETCH_CHARACTERS_ERROR;\n  payload: {\n    error: string;\n  };\n}\n\nexport interface SelectCharacterAction {\n  type: CharacterActionTypes.SELECT_CHARACTER;\n  payload: {\n    character: Character | null;\n  };\n}\n\nexport interface FetchFilmsAction {\n  type: FilmActionTypes.FETCH_FILMS;\n  payload: {\n    filmIds: ResourceId[];\n  };\n}\nexport interface FetchFilmsSuccessAction {\n  type: FilmActionTypes.FETCH_FILMS_SUCCESS;\n  payload: {\n    films: Film[];\n  };\n}\n\nexport interface FetchFilmsErrorAction {\n  type: FilmActionTypes.FETCH_FILMS_ERROR;\n  payload: {\n    error: string;\n  };\n}\n\nexport interface FetchCharacterFilmsSuccessAction {\n  type: FilmActionTypes.FETCH_CHARACTER_FILMS_SUCCESS;\n  payload: {\n    films: Film[];\n  };\n}\n\nexport type CharacterActions =\n  | FetchCharactersAction\n  | FetchCharactersSuccessAction\n  | FetchCharactersErrorAction\n  | SelectCharacterAction;\n\nexport type FilmActions =\n  | FetchFilmsAction\n  | FetchFilmsSuccessAction\n  | FetchFilmsErrorAction\n  | FetchCharacterFilmsSuccessAction;\n","import {\n  CharacterActions,\n  CharacterActionTypes,\n  CharactersState,\n  FilmActions,\n  FilmActionTypes,\n  FilmsState,\n} from \"./types\";\n\nconst initialCharactersState: CharactersState = {\n  characters: {\n    count: 0,\n    hasMoreData: false,\n    data: [],\n  },\n  selectedCharacter: null,\n  loading: false,\n  error: null,\n  page: 1,\n};\n\nconst charactersReducer = (\n  state: CharactersState = initialCharactersState,\n  action: CharacterActions\n): CharactersState => {\n  switch (action.type) {\n    case CharacterActionTypes.FETCH_CHARACTERS:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n        characters:\n          action.payload.page === 1\n            ? { ...state.characters, data: [] }\n            : state.characters,\n      };\n    case CharacterActionTypes.FETCH_CHARACTERS_SUCCESS:\n      const { characters } = action.payload;\n      const nextPage = characters.hasMoreData ? state.page + 1 : 1;\n\n      return {\n        ...state,\n        loading: false,\n        page: nextPage,\n        characters: {\n          count: characters.count,\n          hasMoreData: characters.hasMoreData,\n          data: [...state.characters.data, ...characters.data],\n        },\n      };\n    case CharacterActionTypes.FETCH_CHARACTERS_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error,\n      };\n    case CharacterActionTypes.SELECT_CHARACTER:\n      return {\n        ...state,\n        selectedCharacter: action.payload.character,\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialFilmsState: FilmsState = {\n  films: [],\n  selectedCharacterFilms: [],\n  loading: false,\n  error: null,\n};\n\nconst filmsReducer = (\n  state: FilmsState = initialFilmsState,\n  action: FilmActions\n): FilmsState => {\n  switch (action.type) {\n    case FilmActionTypes.FETCH_FILMS:\n      return {\n        ...state,\n        error: null,\n        loading: true,\n      };\n    case FilmActionTypes.FETCH_FILMS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        films: [...state.films, ...action.payload.films],\n      };\n    case FilmActionTypes.FETCH_FILMS_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error,\n      };\n    case FilmActionTypes.FETCH_CHARACTER_FILMS_SUCCESS:\n      return {\n        ...state,\n        selectedCharacterFilms: action.payload.films,\n      };\n    default:\n      return state;\n  }\n};\n\nexport { charactersReducer, filmsReducer };\n","import {\n  Character,\n  Film,\n  PagedData,\n  Planet,\n  ResourceUrl,\n} from \"../state/types\";\n\nexport interface PagedResults<T> {\n  count: number;\n  next?: ResourceUrl;\n  previous?: ResourceUrl;\n  results: T[];\n}\n\nclass StarWarsApi {\n  private baseUrl = \"https://swapi.dev/api/\";\n  private peopleEndpoint = \"people/\";\n  private planetsEndpoint = \"planets/\";\n  private filmsEndpoint = \"films/\";\n\n  private defaultHeaders: HeadersInit = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json; charset=UTF-8\",\n  };\n\n  async fetchCharacters(\n    search: string,\n    page: number = 1\n  ): Promise<PagedData<Character>> {\n    const response = await this.get<PagedResults<any>>(\n      `${this.baseUrl}${this.peopleEndpoint}?search=${search}&page=${page}`\n    );\n\n    const results = await Promise.all(\n      response.results.map(async character => {\n        return await this.mapToCharacter(character);\n      })\n    );\n\n    return {\n      count: response.count,\n      hasMoreData: response.next !== null,\n      data: results,\n    } as PagedData<Character>;\n  }\n\n  async fetchPlanet(planetId: number): Promise<Planet> {\n    const response = await this.get<any>(\n      `${this.baseUrl}${this.planetsEndpoint}${planetId}/`\n    );\n\n    return this.mapToPlanet(response);\n  }\n\n  async fetchFilm(filmId: number): Promise<Film> {\n    const response = await this.get<any>(\n      `${this.baseUrl}${this.filmsEndpoint}${filmId}/`\n    );\n\n    return this.mapToFilm(response);\n  }\n\n  private getIdFromUrl(url: ResourceUrl) {\n    const parts = url.split(\"/\").reverse();\n    return +parts[1];\n  }\n\n  private async mapToCharacter(character: any): Promise<Character> {\n    const planetId = this.getIdFromUrl(character.homeworld);\n    const planet = await this.fetchPlanet(planetId);\n\n    return {\n      id: this.getIdFromUrl(character.url),\n      name: character.name,\n      homeworld: planet,\n      filmIds: character.films.map((filmUrl: string) =>\n        this.getIdFromUrl(filmUrl)\n      ),\n    };\n  }\n\n  private mapToPlanet(planet: any): Planet {\n    return {\n      id: this.getIdFromUrl(planet.url),\n      name: planet.name,\n      population: planet.population,\n    };\n  }\n\n  private mapToFilm(film: any): Film {\n    return {\n      id: this.getIdFromUrl(film.url),\n      title: film.title,\n      releaseDate: new Date(film[\"release_date\"]),\n      openingCrawl: film[\"opening_crawl\"],\n    };\n  }\n\n  private async get<T>(path: string, config?: RequestInit): Promise<T> {\n    const init = { method: \"GET\", headers: this.defaultHeaders, ...config };\n    return await this.makeRequest(new Request(path, init));\n  }\n\n  private async makeRequest<T>(request: RequestInfo): Promise<T> {\n    const response = await fetch(request);\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    const body = (await response.json()) as Promise<T>;\n\n    return body;\n  }\n}\n\nexport const starWarsApi = new StarWarsApi();\n","import {\n  Character,\n  CharacterActionTypes,\n  FetchCharacterFilmsSuccessAction,\n  FetchCharactersAction,\n  FetchCharactersErrorAction,\n  FetchCharactersSuccessAction,\n  FetchFilmsAction,\n  FetchFilmsErrorAction,\n  FetchFilmsSuccessAction,\n  Film,\n  FilmActionTypes,\n  PagedData,\n  ResourceId,\n  SelectCharacterAction,\n} from \"./types\";\n\nexport function fetchCharacters(\n  searchValue: string,\n  page: number\n): FetchCharactersAction {\n  return {\n    type: CharacterActionTypes.FETCH_CHARACTERS,\n    payload: { searchValue, page },\n  };\n}\n\nexport function fetchCharactersSuccess(\n  characters: PagedData<Character>\n): FetchCharactersSuccessAction {\n  return {\n    type: CharacterActionTypes.FETCH_CHARACTERS_SUCCESS,\n    payload: { characters },\n  };\n}\n\nexport function fetchCharactersError(\n  error: string\n): FetchCharactersErrorAction {\n  return {\n    type: CharacterActionTypes.FETCH_CHARACTERS_ERROR,\n    payload: { error },\n  };\n}\n\nexport function selectCharacter(\n  character: Character | null\n): SelectCharacterAction {\n  return {\n    type: CharacterActionTypes.SELECT_CHARACTER,\n    payload: { character },\n  };\n}\n\nexport function fetchFilms(filmIds: ResourceId[]): FetchFilmsAction {\n  return {\n    type: FilmActionTypes.FETCH_FILMS,\n    payload: { filmIds },\n  };\n}\n\nexport function fetchFilmsSuccess(films: Film[]): FetchFilmsSuccessAction {\n  return {\n    type: FilmActionTypes.FETCH_FILMS_SUCCESS,\n    payload: { films },\n  };\n}\n\nexport function fetchFilmsError(error: string): FetchFilmsErrorAction {\n  return {\n    type: FilmActionTypes.FETCH_FILMS_ERROR,\n    payload: { error },\n  };\n}\n\nexport function fetchCharacterFilmsSuccess(\n  films: Film[]\n): FetchCharacterFilmsSuccessAction {\n  return {\n    type: FilmActionTypes.FETCH_CHARACTER_FILMS_SUCCESS,\n    payload: { films },\n  };\n}\n","import { all, call, fork, put, select, takeLatest } from \"redux-saga/effects\";\nimport { AppState } from \".\";\nimport { starWarsApi } from \"../services/starWarsApi\";\nimport {\n  fetchCharacterFilmsSuccess,\n  fetchCharactersError,\n  fetchCharactersSuccess,\n  fetchFilmsError,\n  fetchFilmsSuccess,\n} from \"./actions\";\nimport {\n  Character,\n  CharacterActionTypes,\n  FetchCharactersAction,\n  FetchFilmsAction,\n  Film,\n  FilmActionTypes,\n  PagedData,\n  ResourceId,\n} from \"./types\";\n\nfunction* handleCharactersFetch(action: FetchCharactersAction) {\n  const { searchValue, page } = action.payload;\n\n  try {\n    const result: PagedData<Character> = yield call(\n      [starWarsApi, starWarsApi.fetchCharacters],\n      searchValue,\n      page\n    );\n\n    yield put(fetchCharactersSuccess(result));\n  } catch (error) {\n    yield put(fetchCharactersError(error.message));\n  }\n}\n\nfunction* watchFetchCharacters(): Generator {\n  yield takeLatest(\n    CharacterActionTypes.FETCH_CHARACTERS,\n    handleCharactersFetch\n  );\n}\n\nexport function* charactersSaga() {\n  yield all([fork(watchFetchCharacters)]);\n}\n\nconst findFilm = (filmId: ResourceId, films: Film[]) => {\n  return films.find(film => film.id === filmId);\n};\n\nconst selectFilms = (state: AppState) => state.films.films;\n\nfunction* handleFilmsFetch(action: FetchFilmsAction) {\n  const { filmIds } = action.payload;\n  const characterFilms: Film[] = [];\n  const filmIdsToFetch: ResourceId[] = [];\n  const films: Film[] = yield select(selectFilms);\n\n  filmIds.forEach(filmId => {\n    const foundFilm = findFilm(filmId, films);\n\n    if (foundFilm) {\n      characterFilms.push(foundFilm);\n    } else {\n      filmIdsToFetch.push(filmId);\n    }\n  });\n\n  try {\n    const result: Film[] = yield all(\n      filmIdsToFetch.map(filmId =>\n        call([starWarsApi, starWarsApi.fetchFilm], filmId)\n      )\n    );\n\n    characterFilms.push(...result);\n\n    yield put(fetchFilmsSuccess(result));\n    yield put(fetchCharacterFilmsSuccess(characterFilms));\n  } catch (error) {\n    yield put(fetchFilmsError(error.message));\n  }\n}\n\nfunction* watchFetchFilms(): Generator {\n  yield takeLatest(FilmActionTypes.FETCH_FILMS, handleFilmsFetch);\n}\n\nexport function* filmsSaga() {\n  yield all([fork(watchFetchFilms)]);\n}\n","import { combineReducers, Reducer } from \"redux\";\nimport { all, fork } from \"redux-saga/effects\";\n\nimport { charactersReducer, filmsReducer } from \"./reducers\";\nimport { CharactersState, FilmsState } from \"./types\";\nimport { charactersSaga, filmsSaga } from \"./sagas\";\n\nexport interface AppState {\n  characters: CharactersState;\n  films: FilmsState;\n}\n\nexport const rootReducer: Reducer<AppState> = combineReducers<AppState>({\n  characters: charactersReducer,\n  films: filmsReducer,\n});\n\nexport function* rootSaga() {\n  yield all([fork(charactersSaga), fork(filmsSaga)]);\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const size = {\n  mobileS: \"320px\",\n  mobileM: \"375px\",\n  mobileL: \"425px\",\n  tablet: \"768px\",\n  laptop: \"1024px\",\n  laptopL: \"1440px\",\n  desktop: \"2560px\",\n};\n\nexport const device = {\n  mobileS: `(max-width: ${size.mobileS})`,\n  mobileM: `(max-width: ${size.mobileM})`,\n  mobileL: `(max-width: ${size.mobileL})`,\n  tablet: `(max-width: ${size.tablet})`,\n  laptop: `(max-width: ${size.laptop})`,\n  laptopL: `(max-width: ${size.laptopL})`,\n  desktop: `(max-width: ${size.desktop})`,\n  desktopL: `(max-width: ${size.desktop})`,\n};\n","import styled, { css } from \"styled-components\";\nimport { device } from \"../../utils/breakpoints\";\n\nconst StyledButton = styled.button`\n  border: none;\n  border-radius: 50px;\n  box-shadow: ${({ theme }) => theme.boxShadow};\n  cursor: pointer;\n  font-size: 1.6em;\n  outline: none;\n  padding: 0.6em 3em;\n  transition: box-shadow 0.3s ease-in-out;\n\n  ${props =>\n    props.disabled\n      ? css`\n          background-color: rgba(0, 0, 0, 0.05);\n          color: rgba(0, 0, 0, 0.15);\n        `\n      : css`\n          background-color: ${({ theme }) => theme.componentBackgroundColor};\n          color: ${({ theme }) => theme.primaryColor};\n        `};\n\n  &:active {\n    box-shadow: ${({ theme }) => theme.activeBoxShadow};\n  }\n\n  @media ${device.mobileL} {\n    font-size: 1.2em;\n  }\n`;\n\nexport { StyledButton };\n","import Button from \"./Button\";\n\nexport default Button;\n","import React from \"react\";\n\nimport { StyledButton } from \"./Button.styled\";\n\nexport default function Button({ children, ...otherProps }) {\n  return <StyledButton {...otherProps}>{children}</StyledButton>;\n}\n","import React from 'react';\n\nimport { Film } from '../../state/types';\n\nimport { trauncateText } from '../../utils/text';\n\ntype Props = {\n    film: Film,\n}\n\nconst TRUCANTE_CHARS_COUNT = 130\n\nconst FilmListItem = ({ film }: Props) => {\n    const { title, releaseDate, openingCrawl } = film\n\n    return (\n        <li>\n            <h3>{title}</h3>\n            <p>{releaseDate.toLocaleDateString()}</p>\n            <p>{trauncateText(openingCrawl, TRUCANTE_CHARS_COUNT)}</p>\n        </li>\n    )\n}\n\nexport default FilmListItem","export const trauncateText = (text: string, charactersCount: number) => {\n  return text.length > charactersCount\n    ? text.substring(0, charactersCount) + \"...\"\n    : text;\n};\n","import styled from 'styled-components';\n\nconst StyledFilmsList = styled.ul`\n    max-height: calc(100vh - 200px);\n    overflow-y: auto;\n`\n\nexport { StyledFilmsList }","import React from 'react';\n\nimport { Film } from '../../state/types';\nimport FilmListItem from './FilmListItem';\nimport { StyledFilmsList } from './FilmsList.styled';\n\ntype FilmsListProps = {\n    films: Film[]\n}\n\nconst FilmsList = ({ films }: FilmsListProps) => {\n    const renderFilm = (film: Film) => {\n        return (\n            <FilmListItem key={film.id} film={film} />\n        )\n    }\n\n    const renderFilmsList = () => {\n        return films.map(film => renderFilm(film))\n    }\n\n    return (\n        <StyledFilmsList>{ renderFilmsList() }</StyledFilmsList>\n    )\n}\n\nexport default FilmsList","import styled from 'styled-components';\n\nconst StyledErrorMessage = styled.p`\n    color: #c62222;\n`\n\nexport { StyledErrorMessage }","import styled from \"styled-components\";\n\nconst StyledText = styled.p`\n  color: ${({ theme }) => theme.primaryColor};\n  display: inline-block;\n  font-size: 2.6rem;\n  margin: 0;\n`;\n\nexport { StyledText };\n","import Text from \"./Text\";\n\nexport default Text;\n","import React from \"react\";\n\nimport { StyledText } from \"./Text.styled\";\n\nexport default function Text({ children, ...otherProps }) {\n  return <StyledText {...otherProps}>{children}</StyledText>;\n}\n","import React, { useContext } from 'react';\nimport Loader from 'react-loader-spinner';\nimport { ThemeContext } from 'styled-components'\n\nconst ThemedLoader = () => {\n    const themeContext = useContext(ThemeContext)\n\n    return (\n    <Loader\n        type=\"Oval\"\n        color={themeContext.accentColor}\n        height={40}\n        width={40}\n    />)\n}\n\nexport default ThemedLoader","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport FilmsList from '../components/Films/FilmsList';\nimport { StyledErrorMessage } from '../components/ErrorMessage/ErrorMessage.styled';\nimport Text from '../components/Text';\nimport ThemedLoader from '../components/ThemedLoader/ThemedLoader';\n\nimport { AppState } from '../state';\nimport { Character } from '../state/types';\nimport { fetchFilms } from '../state/actions';\n\ntype Props = {\n    character: Character\n}\n\nconst CharacterDetailsContainer = ({ character }: Props) => {\n    const { selectedCharacterFilms, loading, error } = useSelector((state: AppState) => state.films)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchFilms(character.filmIds))\n    }, [character.filmIds, dispatch])\n\n    const showNoFilmsInfo = () => {\n        return !loading && !error && selectedCharacterFilms.length === 0\n    }\n\n    const showError = () => {\n        return !loading && error\n    }\n\n    return (\n        <>\n            <h2>List of movies in which {character.name} appeared</h2>\n\n            {loading && (\n                <ThemedLoader />\n            )}\n\n            {!loading && <FilmsList films={selectedCharacterFilms} />}\n            {showNoFilmsInfo() && <Text>No films found.</Text>}\n            {showError() && <StyledErrorMessage>{error}</StyledErrorMessage>}\n        </>\n    )\n}\n\nexport default CharacterDetailsContainer","import styled from 'styled-components';\n\nconst StyledCharactersListItem = styled.li`\n    border-radius: 10px;\n    box-shadow: ${({ theme }) => theme.boxShadow};\n    cursor: pointer;\n    padding: 1em 2em;\n`\n\nexport { StyledCharactersListItem }","import React from 'react';\n\nimport { Character } from '../../state/types';\nimport { StyledCharactersListItem } from './CharactersListItem.styled';\n\ntype Props = {\n    character: Character,\n    onClick: (character: Character) => void;\n}\n\nconst CharacterListItem = ({ character, onClick }: Props) => {\n    const { name, population } = character.homeworld\n\n    return (\n        <StyledCharactersListItem onClick={() => onClick(character)}>\n            <h3>{character.name}</h3>\n            <p>Homeworld: {name}, Population: {population}</p>\n        </StyledCharactersListItem>\n    )\n}\n\nexport default CharacterListItem","import styled from 'styled-components';\nimport { device } from '../../utils/breakpoints';\n\nconst StyledCharactersList = styled.ul`\n    display: grid;\n    gap: 2.5rem;\n    grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n    margin: 2em 0;\n\n    @media ${device.tablet} {\n        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n    }\n`\n\nexport { StyledCharactersList }","import React from 'react';\n\nimport { Character } from '../../state/types';\nimport CharacterListItem from './CharacterListItem';\nimport { StyledCharactersList } from './CharactersList.styled';\n\ntype CharactersListProps =  {\n    characters: Character[]\n    onCharacterSelect: (character: Character) => void\n}\n\nconst CharactersList = ({ characters, onCharacterSelect }: CharactersListProps) => {\n    const renderCharacter = (character: Character) => {\n        return (\n            <CharacterListItem key={character.id} character={character} onClick={onCharacterSelect} />\n        )\n    }\n\n    const renderCharactersList = () => {\n        return characters.map(character => renderCharacter(character))\n    }\n\n    return (\n        <StyledCharactersList>{ renderCharactersList() }</StyledCharactersList>\n    )\n}\n\nexport default CharactersList","import styled from 'styled-components';\nimport { device } from '../../utils/breakpoints';\n\nconst StyledModalBox = styled.div`\n    background: #fff;\n    border-radius: 5px;\n    margin: 20px auto;\n    max-height: calc(100vh - 40px);\n    overflow: hidden;\n    padding: 20px;\n    position: relative;\n    width: 60%;\n\n    @media ${device.laptop} {\n        width: 80%;\n    }\n\n    @media ${device.tablet} {\n        height: 100vh;\n        margin: 0;\n        max-height: initial;\n        padding: 20px 10px;\n        width: 100%;\n    }\n`\n\nexport { StyledModalBox }","import styled from 'styled-components';\n\nconst StyledModalCloseButton = styled.button`\n    background: none;\n    border: none;\n    color: #333;\n    cursor: pointer;\n    font-size: 30px;\n    font-weight: bold;\n    outline: none;\n    position: absolute;\n    right: 20px;\n    top: 10px;\n    transition: all 200ms;\n\n    &:hover {\n        color:${({ theme }) => theme.accentColor};\n    }\n`\n\nexport { StyledModalCloseButton }","import styled from 'styled-components';\nimport { device } from '../../utils/breakpoints';\n\nconst StyledModalContent = styled.div`\n    margin: 1em 2em;\n\n    @media ${device.tablet} {\n        margin: 1em 0;\n    }\n`\n\nexport { StyledModalContent }","import styled from 'styled-components';\n\ntype Props = {\n    isOpen: boolean\n}\n\nconst StyledModalOverlay = styled.div<Props>`\n    background: rgba(0, 0, 0, 0.7);\n    bottom: 0;\n    left: 0;\n    opacity: ${({ isOpen }) => isOpen ? \"1\" : \"0\"};\n    position: fixed;\n    right: 0;\n    top: 0;\n    transition: all 0.3s linear;\n    visibility: ${({ isOpen }) => isOpen ? \"visible\" : \"hidden\"};\n`\n\nexport { StyledModalOverlay }","import React, { FC, useEffect } from 'react';\nimport { StyledModalBox } from './ModalBox.styled';\nimport { StyledModalCloseButton } from './ModalCloseButton';\nimport { StyledModalContent } from './ModalContent.styled';\nimport { StyledModalOverlay } from './ModalOverlay.styled';\n\ntype ModalProps = {\n    isOpen: boolean\n    onClose: () => void\n}\n\nconst Modal: FC<ModalProps> = ({ isOpen, onClose, children }) => {\n    useEffect(() => {\n        if (isOpen) {\n            // to prevent body scroll when modal is opened\n            document.body.style.overflow = \"hidden\"\n        }\n\n        return () => {\n            document.body.style.overflow = \"unset\"\n        }\n    }, [isOpen])\n\n    return (\n        <>\n            <StyledModalOverlay isOpen={isOpen}>\n                <StyledModalBox>\n                    <StyledModalCloseButton onClick={onClose}>\n                        &times;\n                    </StyledModalCloseButton>\n                    <StyledModalContent>\n                        {children}\n                    </StyledModalContent>\n                </StyledModalBox>\n            </StyledModalOverlay>\n        </>\n    )\n}\n\nexport default Modal","import styled from \"styled-components\";\nimport { device } from \"../../utils/breakpoints\";\n\nconst FormTitle = styled.h1`\n  color: ${({ theme }) => theme.secondaryAccentColor};\n  margin: 0 0 2rem;\n\n  @media ${device.mobileL} {\n    font-size: 1.6em;\n  }\n`;\n\nexport { FormTitle };\n","import styled from \"styled-components\";\nimport { device } from \"../../utils/breakpoints\";\n\nconst StyledInput = styled.input`\n  background-color: ${({ theme }) => theme.componentBackgroundColor};\n  border: none;\n  border-radius: 50px;\n  box-shadow: ${({ theme }) => theme.activeBoxShadow};\n  color: ${({ theme }) => theme.primaryColor};\n  font-size: 1.6em;\n  outline: none;\n  padding: 0.6em 1.5em;\n  width: 100%;\n\n  &::placeholder {\n    color: ${({ theme }) => theme.placeholderColor};\n  }\n\n  @media ${device.mobileL} {\n    font-size: 1.2em;\n  }\n`;\n\nexport { StyledInput };\n","import Input from \"./Input\";\n\nexport default Input;\n","import React from \"react\";\n\nimport { StyledInput } from \"./Input.styled\";\n\nexport default function Input(props) {\n  return <StyledInput {...props} />;\n}\n","import styled from \"styled-components\";\nimport { device } from \"../../utils/breakpoints\";\n\nconst StyledForm = styled.form`\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.boxShadow};\n  margin: 0 auto;\n  overflow: hidden;\n  padding: 4rem 2rem;\n  text-align: left;\n  width: 550px;\n\n  @media ${device.tablet} {\n    width: 100%;\n  }\n`;\n\nexport { StyledForm };\n","import styled from \"styled-components\";\n\nconst StyledFormGroup = styled.div`\n  margin-bottom: 3rem;\n`;\n\nexport { StyledFormGroup };\n","import React, { ChangeEvent, FormEvent, useState } from 'react';\n\nimport Button from '../Button';\nimport { FormTitle } from '../Form/FormTitle.styled';\nimport Input from '../Input';\nimport { StyledForm } from '../Form/Form.styled';\nimport { StyledFormGroup } from '../Form/FormGroup.styled';\n\ntype Props = {\n    searchCharacter: (searchValue: string) => void\n}\n\nconst SearchCharacterForm = ({ searchCharacter }: Props) => {\n    const [searchValue, setSearchValue] = useState(\"\")\n\n    const handleSearchValueChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setSearchValue(e.target.value)\n    }\n\n    const handleFormSubmit = (e: FormEvent) => {\n        e.preventDefault()\n\n        searchCharacter(searchValue)\n    }\n\n    return (\n        <StyledForm onSubmit={handleFormSubmit}>\n            <FormTitle>Search Your Favorite Characters</FormTitle>\n            <StyledFormGroup>\n            <Input\n                type=\"text\"\n                name=\"search\"\n                placeholder=\"Search a character\"\n                onChange={handleSearchValueChange}\n            />\n            </StyledFormGroup>\n            <Button>Search</Button>\n        </StyledForm>\n    )\n}\n\nexport default SearchCharacterForm","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { AppState } from '../state/index';\nimport { Character } from '../state/types';\nimport { fetchCharacters, selectCharacter } from '../state/actions';\n\nimport Button from '../components/Button';\nimport CharacterDetailsContainer from './CharacterDetailsContainer';\nimport CharactersList from '../components/Characters/CharactersList';\nimport Modal from '../components/Modal/Modal';\nimport SearchCharacterForm from '../components/Characters/SearchCharacterForm';\nimport { StyledErrorMessage } from '../components/ErrorMessage/ErrorMessage.styled';\nimport Text from '../components/Text';\nimport ThemedLoader from '../components/ThemedLoader/ThemedLoader';\n\nconst CharactersListContainer = () => {\n    const { characters, selectedCharacter, loading, page, error } = useSelector((state: AppState) => state.characters)\n    const dispatch = useDispatch()\n    const [searchValue, setSearchValue] = useState<string | null>(null)\n\n    const onSearchCharacter = useCallback((value: string) => {\n        setSearchValue(value)\n        dispatch(fetchCharacters(value, 1))\n    }, [dispatch])\n\n    const handleLoadMoreCharacters = () => {\n        if (searchValue !== null) {\n            dispatch(fetchCharacters(searchValue, page))\n        }\n    }\n\n    const showLoadMoreCharactersButton = () => {\n        return !loading && characters.hasMoreData\n    }\n\n    const showNoCharactersInfo = () => {\n        return !loading && !error && characters.data.length === 0 && searchValue !== null\n    }\n\n    const handleCharacterSelect = (character: Character) => {\n        dispatch(selectCharacter(character))\n    }\n\n    const showError = () => {\n        return !loading && error\n    }\n\n    const closeModal = () => {\n        dispatch(selectCharacter(null))\n    }\n\n    return (\n        <>\n            <SearchCharacterForm searchCharacter={onSearchCharacter} />\n            <CharactersList characters={characters.data} onCharacterSelect={handleCharacterSelect} />\n            {showLoadMoreCharactersButton() && <Button onClick={handleLoadMoreCharacters}>Load more characters</Button>}\n            {loading && (\n                <ThemedLoader />\n            )}\n            {showNoCharactersInfo() && <Text>No characters found.</Text>}\n            {showError() && <StyledErrorMessage>{error}</StyledErrorMessage>}\n\n            <Modal isOpen={selectedCharacter !== null} onClose={closeModal}>\n                {selectedCharacter !== null && <CharacterDetailsContainer character={selectedCharacter} />}\n            </Modal>\n        </>\n    )\n}\n\nexport default CharactersListContainer","import styled from \"styled-components\";\nimport { device } from \"../../utils/breakpoints\";\n\nconst StyledAppContainer = styled.div`\n  margin: 2em 4em;\n\n  @media ${device.tablet} {\n    margin: 2em 1em;\n  }\n`;\n\nexport { StyledAppContainer };\n","export const theme = {\n  accentColor: \"#0850FA\",\n  activeBoxShadow:\n    \"inset 3px 5px 8px rgba(0, 0, 0, 0.2), -3px -5px 8px rgba(255, 255, 255, 0.5)\",\n  boxShadow:\n    \"5px 10px 15px rgba(0, 0, 0, 0.2), -5px -10px 15px rgba(255, 255, 255, 0.5)\",\n  componentBackgroundColor: \"#ecedf0\",\n  placeholderColor: \"#98a2ba\",\n  primaryColor: \"#788093\",\n  progressBarLineStartColor: \"rgb(6, 81, 250)\",\n  progressBarLineEndColor: \"rgb(0, 223, 226)\",\n  secondaryAccentColor: \"#326cf5\",\n};","import React from 'react';\nimport { ThemeProvider } from \"styled-components\";\n\nimport CharactersListContainer from './containers/CharactersListContainer';\nimport { StyledAppContainer } from './components/AppContainer/AppContainer.styled';\n\nimport { theme } from \"./theme\";\n\nfunction App() {\n  return (\n    <ThemeProvider theme={ theme }>\n      <StyledAppContainer>\n        <h1>Star Wars</h1>\n        <CharactersListContainer />\n      </StyledAppContainer>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as ReduxProvider } from 'react-redux'\n\nimport configureStore from './state/store';\nimport reportWebVitals from './reportWebVitals';\n\nimport App from './App';\n\nimport './index.css';\n\nconst store = configureStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReduxProvider store={ store }>\n      <App />\n    </ReduxProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { applyMiddleware, createStore, Store } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { AppState, rootReducer, rootSaga } from \".\";\n\nexport default function configureStore(): Store<AppState> {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = applyMiddleware(sagaMiddleware);\n\n  const composeEnhancers = composeWithDevTools({});\n\n  const store = createStore(rootReducer, composeEnhancers(middlewares));\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n"],"sourceRoot":""}