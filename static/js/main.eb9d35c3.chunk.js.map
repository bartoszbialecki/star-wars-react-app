{"version":3,"sources":["state/types.ts","state/reducers.ts","services/starWarsApi.ts","state/actions.ts","state/sagas.ts","state/index.ts","reportWebVitals.ts","components/Characters/CharactersListItem.styled.tsx","components/Characters/CharacterListItem.tsx","components/Characters/CharactersList.styled.tsx","components/Characters/CharactersList.tsx","components/Button/Button.styled.js","components/Button/index.js","components/Button/Button.js","components/Form/Form.styled.js","components/Form/FormGroup.styled.js","components/Form/FormTitle.styled.js","components/Input/Input.styled.js","components/Input/index.js","components/Input/Input.js","components/Characters/SearchCharacterForm.tsx","components/Text/Text.styled.js","components/Text/index.js","components/Text/Text.js","containers/CharactersListContainer.tsx","components/AppContainer/AppContainer.styled.ts","theme/index.tsx","App.tsx","index.tsx","state/store.ts"],"names":["CharacterActionTypes","initialState","characters","count","hasMoreData","data","loading","error","page","reducer","state","action","type","FETCH_CHARACTERS","payload","FETCH_CHARACTERS_SUCCESS","nextPage","FETCH_CHARACTERS_ERROR","starWarsApi","baseUrl","peopleEndpoint","planetsEndpoint","filmsEndpoint","defaultHeaders","Accept","search","a","this","get","response","Promise","all","results","map","character","mapToCharacter","next","planetId","mapToPlanet","url","split","reverse","getIdFromUrl","homeworld","fetchPlanet","planet","id","name","filmIds","films","filmUrl","population","path","config","init","method","headers","makeRequest","Request","request","fetch","ok","Error","statusText","json","body","fetchCharacters","searchValue","handleCharactersFetch","watchFetchCharacters","charactersSaga","call","result","put","message","takeLatest","fork","rootSaga","rootReducer","combineReducers","charactersReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StyledCharactersListItem","styled","li","theme","boxShadow","CharacterListItem","StyledCharactersList","ul","CharactersList","renderCharacter","StyledButton","button","props","disabled","css","componentBackgroundColor","primaryColor","activeBoxShadow","Button","children","otherProps","StyledForm","form","StyledFormGroup","div","FormTitle","h1","secondaryAccentColor","StyledInput","input","placeholderColor","Input","SearchCharacterForm","searchCharacter","useState","setSearchValue","onSubmit","e","preventDefault","placeholder","onChange","target","value","StyledText","p","Text","CharactersListContainer","useSelector","dispatch","useDispatch","themeContext","useContext","ThemeContext","onSearchCharacter","useCallback","onClick","color","accentColor","height","width","length","StyledAppContainer","progressBarLineStartColor","progressBarLineEndColor","App","store","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","composeEnhancers","composeWithDevTools","createStore","run","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb9d35c3.chunk.js","sourcesContent":["export type ResourceUrl = string;\nexport type ResourceId = number;\n\nexport interface Resource {\n  id: number;\n}\n\nexport interface PagedData<T> {\n  count: number;\n  hasMoreData: boolean;\n  data: T[];\n}\n\nexport interface Planet extends Resource {\n  name: string;\n  population: number;\n}\n\nexport interface Character extends Resource {\n  name: string;\n  homeworld: Planet;\n  filmIds: ResourceId[];\n}\n\nexport interface CharactersState {\n  readonly characters: PagedData<Character>;\n  readonly loading: boolean;\n  readonly error: string | null;\n  readonly page: number;\n}\n\nexport enum CharacterActionTypes {\n  FETCH_CHARACTERS = \"@@characters/FETCH_CHARACTERS\",\n  FETCH_CHARACTERS_SUCCESS = \"@@characters/FETCH_CHARACTERS_SUCCESS\",\n  FETCH_CHARACTERS_ERROR = \"@@characters/FETCH_CHARACTERS_ERROR\",\n}\n\nexport interface FetchCharactersAction {\n  type: CharacterActionTypes.FETCH_CHARACTERS;\n  payload: {\n    searchValue: string;\n    page: number;\n  };\n}\n\nexport interface FetchCharactersSuccessAction {\n  type: CharacterActionTypes.FETCH_CHARACTERS_SUCCESS;\n  payload: {\n    characters: PagedData<Character>;\n  };\n}\n\nexport interface FetchCharactersErrorAction {\n  type: CharacterActionTypes.FETCH_CHARACTERS_ERROR;\n  payload: {\n    error: string;\n  };\n}\n\nexport type CharacterActions =\n  | FetchCharactersAction\n  | FetchCharactersSuccessAction\n  | FetchCharactersErrorAction;\n","import {\n  CharacterActions,\n  CharacterActionTypes,\n  CharactersState,\n} from \"./types\";\n\nconst initialState: CharactersState = {\n  characters: {\n    count: 0,\n    hasMoreData: false,\n    data: [],\n  },\n  loading: false,\n  error: null,\n  page: 1,\n};\n\nconst reducer = (\n  state: CharactersState = initialState,\n  action: CharacterActions\n): CharactersState => {\n  switch (action.type) {\n    case CharacterActionTypes.FETCH_CHARACTERS:\n      return {\n        ...state,\n        loading: true,\n        characters:\n          action.payload.page === 1\n            ? { ...state.characters, data: [] }\n            : state.characters,\n      };\n    case CharacterActionTypes.FETCH_CHARACTERS_SUCCESS:\n      const { characters } = action.payload;\n      const nextPage = characters.hasMoreData ? state.page + 1 : 1;\n\n      return {\n        ...state,\n        loading: false,\n        page: nextPage,\n        characters: {\n          count: characters.count,\n          hasMoreData: characters.hasMoreData,\n          data: [...state.characters.data, ...characters.data],\n        },\n      };\n    case CharacterActionTypes.FETCH_CHARACTERS_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { Character, PagedData, Planet, ResourceUrl } from \"../state/types\";\n\nexport interface PagedResults<T> {\n  count: number;\n  next?: ResourceUrl;\n  previous?: ResourceUrl;\n  results: T[];\n}\n\nclass StarWarsApi {\n  private baseUrl = \"https://swapi.dev/api/\";\n  private peopleEndpoint = \"people/\";\n  private planetsEndpoint = \"planets/\";\n  private filmsEndpoint = \"films/\";\n\n  private defaultHeaders: HeadersInit = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json; charset=UTF-8\",\n  };\n\n  async fetchCharacters(\n    search: string,\n    page: number = 1\n  ): Promise<PagedData<Character>> {\n    const response = await this.get<PagedResults<any>>(\n      `${this.baseUrl}${this.peopleEndpoint}?search=${search}&page=${page}`\n    );\n\n    const results = await Promise.all(\n      response.results.map(async character => {\n        return await this.mapToCharacter(character);\n      })\n    );\n\n    return {\n      count: response.count,\n      hasMoreData: response.next !== null,\n      data: results,\n    } as PagedData<Character>;\n  }\n\n  async fetchPlanet(planetId: number): Promise<Planet> {\n    const response = await this.get<any>(\n      `${this.baseUrl}${this.planetsEndpoint}${planetId}/`\n    );\n\n    return this.mapToPlanet(response);\n  }\n\n  private getIdFromUrl(url: ResourceUrl) {\n    const parts = url.split(\"/\").reverse();\n    return +parts[1];\n  }\n\n  private async mapToCharacter(character: any): Promise<Character> {\n    const planetId = this.getIdFromUrl(character.homeworld);\n    const planet = await this.fetchPlanet(planetId);\n\n    return {\n      id: this.getIdFromUrl(character.url),\n      name: character.name,\n      homeworld: planet,\n      filmIds: character.films.map((filmUrl: string) =>\n        this.getIdFromUrl(filmUrl)\n      ),\n    };\n  }\n\n  private mapToPlanet(planet: any): Planet {\n    return {\n      id: this.getIdFromUrl(planet.url),\n      name: planet.name,\n      population: +planet.population,\n    };\n  }\n\n  private async get<T>(path: string, config?: RequestInit): Promise<T> {\n    const init = { method: \"GET\", headers: this.defaultHeaders, ...config };\n    return await this.makeRequest(new Request(path, init));\n  }\n\n  private async makeRequest<T>(request: RequestInfo): Promise<T> {\n    const response = await fetch(request);\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    const body = (await response.json()) as Promise<T>;\n\n    return body;\n  }\n}\n\nexport const starWarsApi = new StarWarsApi();\n","import {\n  Character,\n  CharacterActionTypes,\n  FetchCharactersAction,\n  FetchCharactersErrorAction,\n  FetchCharactersSuccessAction,\n  PagedData,\n} from \"./types\";\n\nexport function fetchCharacters(\n  searchValue: string,\n  page: number\n): FetchCharactersAction {\n  return {\n    type: CharacterActionTypes.FETCH_CHARACTERS,\n    payload: { searchValue, page },\n  };\n}\n\nexport function fetchCharactersSuccess(\n  characters: PagedData<Character>\n): FetchCharactersSuccessAction {\n  return {\n    type: CharacterActionTypes.FETCH_CHARACTERS_SUCCESS,\n    payload: { characters },\n  };\n}\n\nexport function fetchCharactersError(\n  error: string\n): FetchCharactersErrorAction {\n  return {\n    type: CharacterActionTypes.FETCH_CHARACTERS_ERROR,\n    payload: { error },\n  };\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { starWarsApi } from \"../services/starWarsApi\";\nimport { fetchCharactersError, fetchCharactersSuccess } from \"./actions\";\nimport {\n  Character,\n  CharacterActionTypes,\n  FetchCharactersAction,\n  PagedData,\n} from \"./types\";\n\nfunction* handleCharactersFetch(action: FetchCharactersAction) {\n  const { searchValue, page } = action.payload;\n\n  try {\n    const result: PagedData<Character> = yield call(\n      [starWarsApi, starWarsApi.fetchCharacters],\n      searchValue,\n      page\n    );\n\n    yield put(fetchCharactersSuccess(result));\n  } catch (error) {\n    yield put(fetchCharactersError(error.message));\n  }\n}\n\nfunction* watchFetchCharacters(): Generator {\n  yield takeLatest(\n    CharacterActionTypes.FETCH_CHARACTERS,\n    handleCharactersFetch\n  );\n}\n\nexport default function* charactersSaga() {\n  yield all([fork(watchFetchCharacters)]);\n}\n","import { combineReducers, Reducer } from \"redux\";\nimport { all, fork } from \"redux-saga/effects\";\n\nimport { default as charactersReducer } from \"./reducers\";\nimport { CharactersState } from \"./types\";\nimport charactersSaga from \"./sagas\";\n\nexport interface AppState {\n  characters: CharactersState;\n}\n\nexport const rootReducer: Reducer<AppState> = combineReducers<AppState>({\n  characters: charactersReducer,\n});\n\nexport function* rootSaga() {\n  yield all([fork(charactersSaga)]);\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import styled from 'styled-components';\n\nconst StyledCharactersListItem = styled.li`\n    border-radius: 10px;\n    box-shadow: ${({ theme }) => theme.boxShadow};\n    padding: 1em 2em;\n    width: 500px;\n`\n\nexport { StyledCharactersListItem }","import React from 'react';\nimport { Character } from '../../state/types';\nimport { StyledCharactersListItem } from './CharactersListItem.styled';\n\ntype Props = {\n    character: Character\n}\n\nconst CharacterListItem = ({ character }: Props) => {\n    const { name, population } = character.homeworld\n\n    return (\n        <StyledCharactersListItem>\n            <h3>{character.name}</h3>\n            <p>Homeworld: {name}, Population: {population}</p>\n        </StyledCharactersListItem>\n    )\n}\n\nexport default CharacterListItem","import styled from 'styled-components';\n\nconst StyledCharactersList = styled.ul`\n    display: grid;\n    gap: 2.5rem;\n    grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));\n    margin: 2em 0;\n`\n\nexport { StyledCharactersList }","import React from 'react';\nimport { Character } from '../../state/types';\nimport CharacterListItem from './CharacterListItem';\nimport { StyledCharactersList } from './CharactersList.styled';\n\ntype CharactersListProps =  {\n    characters: Character[]\n}\n\nconst CharactersList = ({ characters }: CharactersListProps) => {\n    const renderCharacter = (character: Character) => {\n        return (\n            <CharacterListItem key={character.id} character={character} />\n        )\n    }\n\n    const renderCharactersList = () => {\n        return characters.map(character => renderCharacter(character))\n    }\n\n    return (\n        <StyledCharactersList>{ renderCharactersList() }</StyledCharactersList>\n    )\n}\n\nexport default CharactersList","import styled, { css } from \"styled-components\";\n\nconst StyledButton = styled.button`\n  border: none;\n  border-radius: 50px;\n  box-shadow: ${({ theme }) => theme.boxShadow};\n  cursor: pointer;\n  font-size: 1.6em;\n  outline: none;\n  padding: 0.6em 3em;\n  transition: box-shadow 0.3s ease-in-out;\n\n  ${props =>\n    props.disabled\n      ? css`\n          background-color: rgba(0, 0, 0, 0.05);\n          color: rgba(0, 0, 0, 0.15);\n        `\n      : css`\n          background-color: ${({ theme }) => theme.componentBackgroundColor};\n          color: ${({ theme }) => theme.primaryColor};\n        `};\n\n  &:active {\n    box-shadow: ${({ theme }) => theme.activeBoxShadow};\n  }\n`;\n\nexport { StyledButton };\n","import Button from \"./Button\";\n\nexport default Button;\n","import React from \"react\";\n\nimport { StyledButton } from \"./Button.styled\";\n\nexport default function Button({ children, ...otherProps }) {\n  return <StyledButton {...otherProps}>{children}</StyledButton>;\n}\n","import styled from \"styled-components\";\n\nconst StyledForm = styled.form`\n  border-radius: 10px;\n  box-shadow: ${({ theme }) => theme.boxShadow};\n  margin: 0 auto;\n  overflow: hidden;\n  padding: 4rem 2rem;\n  text-align: left;\n  width: 600px;\n`;\n\nexport { StyledForm };\n","import styled from \"styled-components\";\n\nconst StyledFormGroup = styled.div`\n  margin-bottom: 3rem;\n`;\n\nexport { StyledFormGroup };\n","import styled from \"styled-components\";\n\nconst FormTitle = styled.h1`\n  color: ${({ theme }) => theme.secondaryAccentColor};\n  margin: 0 0 2rem;\n`;\n\nexport { FormTitle };\n","import styled from \"styled-components\";\n\nconst StyledInput = styled.input`\n  background-color: ${({ theme }) => theme.componentBackgroundColor};\n  border: none;\n  border-radius: 50px;\n  box-shadow: ${({ theme }) => theme.activeBoxShadow};\n  color: ${({ theme }) => theme.primaryColor};\n  font-size: 1.6em;\n  outline: none;\n  padding: 0.6em 1.5em;\n  width: 100%;\n\n  &::placeholder {\n    color: ${({ theme }) => theme.placeholderColor};\n  }\n`;\n\nexport { StyledInput };\n","import Input from \"./Input\";\n\nexport default Input;\n","import React from \"react\";\n\nimport { StyledInput } from \"./Input.styled\";\n\nexport default function Input(props) {\n  return <StyledInput {...props} />;\n}\n","import React, { ChangeEvent, FormEvent, useState } from 'react';\nimport Button from '../Button';\nimport { StyledForm } from '../Form/Form.styled';\nimport { StyledFormGroup } from '../Form/FormGroup.styled';\nimport { FormTitle } from '../Form/FormTitle.styled';\nimport Input from '../Input';\n\n\n\ntype Props = {\n    searchCharacter: (searchValue: string) => void\n}\n\nconst SearchCharacterForm = ({ searchCharacter }: Props) => {\n    const [searchValue, setSearchValue] = useState(\"\")\n\n    const handleSearchValueChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setSearchValue(e.target.value)\n    }\n\n    const handleFormSubmit = (e: FormEvent) => {\n        e.preventDefault()\n\n        searchCharacter(searchValue)\n    }\n\n    return (\n        <StyledForm onSubmit={handleFormSubmit}>\n            <FormTitle>Search Your Favorite Characters</FormTitle>\n            <StyledFormGroup>\n            <Input\n                type=\"text\"\n                name=\"search\"\n                placeholder=\"Search a character\"\n                onChange={handleSearchValueChange}\n            />\n            </StyledFormGroup>\n            <Button>Search</Button>\n        </StyledForm>\n    )\n}\n\nexport default SearchCharacterForm","import styled from \"styled-components\";\n\nconst StyledText = styled.p`\n  color: ${({ theme }) => theme.primaryColor};\n  display: inline-block;\n  font-size: 2.6rem;\n  margin: 0;\n`;\n\nexport { StyledText };\n","import Text from \"./Text\";\n\nexport default Text;\n","import React from \"react\";\n\nimport { StyledText } from \"./Text.styled\";\n\nexport default function Text({ children, ...otherProps }) {\n  return <StyledText {...otherProps}>{children}</StyledText>;\n}\n","import React, { useCallback, useContext, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppState } from '../state/index'\nimport CharactersList from '../components/Characters/CharactersList';\nimport SearchCharacterForm from '../components/Characters/SearchCharacterForm';\nimport { fetchCharacters } from '../state/actions';\nimport Text from '../components/Text';\nimport Button from '../components/Button';\nimport Loader from 'react-loader-spinner';\nimport { ThemeContext } from 'styled-components'\n\nconst CharactersListContainer = () => {\n    const { characters, loading, page, error } = useSelector((state: AppState) => state.characters)\n    const dispatch = useDispatch()\n    const [searchValue, setSearchValue] = useState(\"\")\n    const themeContext = useContext(ThemeContext)\n\n    const onSearchCharacter = useCallback((value: string) => {\n        setSearchValue(value)\n        dispatch(fetchCharacters(value, 1))\n    }, [dispatch])\n\n    const handleLoadMoreCharacters = () => {\n        dispatch(fetchCharacters(searchValue, page))\n    }\n\n    return (\n        <>\n            <SearchCharacterForm searchCharacter={onSearchCharacter} />\n            <CharactersList characters={characters.data} />\n            {!loading && characters.hasMoreData && <Button onClick={handleLoadMoreCharacters}>Load more characters</Button>}\n            {loading && (\n                <Loader\n                    type=\"Oval\"\n                    color={themeContext.accentColor}\n                    height={40}\n                    width={40}\n                />\n            )}\n            {!loading && characters.data.length === 0 && <Text>No characters found.</Text>}\n            {!loading && error && <p>{error}</p>}\n        </>\n    )\n}\n\nexport default CharactersListContainer","import styled from \"styled-components\";\n\nconst StyledAppContainer = styled.div`\n  margin: 2em 4em;\n`;\n\nexport { StyledAppContainer };\n","export const theme = {\n  accentColor: \"#0850FA\",\n  activeBoxShadow:\n    \"inset 3px 5px 8px rgba(0, 0, 0, 0.2), -3px -5px 8px rgba(255, 255, 255, 0.5)\",\n  boxShadow:\n    \"5px 10px 15px rgba(0, 0, 0, 0.2), -5px -10px 15px rgba(255, 255, 255, 0.5)\",\n  componentBackgroundColor: \"#ecedf0\",\n  placeholderColor: \"#98a2ba\",\n  primaryColor: \"#788093\",\n  progressBarLineStartColor: \"rgb(6, 81, 250)\",\n  progressBarLineEndColor: \"rgb(0, 223, 226)\",\n  secondaryAccentColor: \"#326cf5\",\n};","import React from 'react';\nimport { ThemeProvider } from \"styled-components\";\n\nimport CharactersListContainer from './containers/CharactersListContainer';\nimport { StyledAppContainer } from './components/AppContainer/AppContainer.styled';\n\nimport { theme } from \"./theme\";\n\nfunction App() {\n  return (\n    <ThemeProvider theme={ theme }>\n      <StyledAppContainer>\n        <h1>Star Wars</h1>\n        <CharactersListContainer />\n      </StyledAppContainer>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as ReduxProvider } from 'react-redux'\n\nimport configureStore from './state/store';\nimport reportWebVitals from './reportWebVitals';\n\nimport App from './App';\n\nimport './index.css';\n\nconst store = configureStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReduxProvider store={ store }>\n      <App />\n    </ReduxProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { applyMiddleware, createStore, Store } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { AppState, rootReducer, rootSaga } from \".\";\n\nexport default function configureStore(): Store<AppState> {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = applyMiddleware(sagaMiddleware);\n\n  const composeEnhancers = composeWithDevTools({});\n\n  const store = createStore(rootReducer, composeEnhancers(middlewares));\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n"],"sourceRoot":""}